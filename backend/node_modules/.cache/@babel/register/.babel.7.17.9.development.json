{"{\"assumptions\":{},\"sourceRoot\":\"/Users/kristin/Desktop/hotel-prins-carl/backend/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/kristin/Desktop/hotel-prins-carl/backend\",\"filename\":\"/Users/kristin/Desktop/hotel-prins-carl/backend/server.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/kristin/Desktop/hotel-prins-carl/backend\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.17.9:development":{"value":{"code":"import express from \"express\";\nimport cors from \"cors\";\nimport mongoose from \"mongoose\";\nconst mongoUrl = process.env.MONGO_URL || \"mongodb://localhost/project-mongo\";\nmongoose.connect(mongoUrl, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nmongoose.Promise = Promise; // Defines the port the app will run on. Defaults to 8080, but can be overridden\n// when starting the server. Example command to overwrite PORT env variable value:\n// PORT=9000 npm start\n\nconst port = process.env.PORT || 8080;\nconst app = express(); // Add middlewares to enable cors and json body parsing\n\napp.use(cors());\napp.use(express.json()); // Start defining your routes here\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello Technigo!\");\n}); // Start the server\n\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwiY29ycyIsIm1vbmdvb3NlIiwibW9uZ29VcmwiLCJwcm9jZXNzIiwiZW52IiwiTU9OR09fVVJMIiwiY29ubmVjdCIsInVzZU5ld1VybFBhcnNlciIsInVzZVVuaWZpZWRUb3BvbG9neSIsIlByb21pc2UiLCJwb3J0IiwiUE9SVCIsImFwcCIsInVzZSIsImpzb24iLCJnZXQiLCJyZXEiLCJyZXMiLCJzZW5kIiwibGlzdGVuIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsT0FBUCxNQUFvQixTQUFwQjtBQUNBLE9BQU9DLElBQVAsTUFBaUIsTUFBakI7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLFVBQXJCO0FBRUEsTUFBTUMsUUFBUSxHQUFHQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsU0FBWixJQUF5QixtQ0FBMUM7QUFDQUosUUFBUSxDQUFDSyxPQUFULENBQWlCSixRQUFqQixFQUEyQjtBQUFFSyxFQUFBQSxlQUFlLEVBQUUsSUFBbkI7QUFBeUJDLEVBQUFBLGtCQUFrQixFQUFFO0FBQTdDLENBQTNCO0FBQ0FQLFFBQVEsQ0FBQ1EsT0FBVCxHQUFtQkEsT0FBbkIsQyxDQUVBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNQyxJQUFJLEdBQUdQLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTyxJQUFaLElBQW9CLElBQWpDO0FBQ0EsTUFBTUMsR0FBRyxHQUFHYixPQUFPLEVBQW5CLEMsQ0FFQTs7QUFDQWEsR0FBRyxDQUFDQyxHQUFKLENBQVFiLElBQUksRUFBWjtBQUNBWSxHQUFHLENBQUNDLEdBQUosQ0FBUWQsT0FBTyxDQUFDZSxJQUFSLEVBQVIsRSxDQUVBOztBQUNBRixHQUFHLENBQUNHLEdBQUosQ0FBUSxHQUFSLEVBQWEsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDekJBLEVBQUFBLEdBQUcsQ0FBQ0MsSUFBSixDQUFTLGlCQUFUO0FBQ0QsQ0FGRCxFLENBSUE7O0FBQ0FOLEdBQUcsQ0FBQ08sTUFBSixDQUFXVCxJQUFYLEVBQWlCLE1BQU07QUFDckJVLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLHNDQUFxQ1gsSUFBSyxFQUF2RDtBQUNELENBRkQiLCJzb3VyY2VSb290IjoiL1VzZXJzL2tyaXN0aW4vRGVza3RvcC9ob3RlbC1wcmlucy1jYXJsL2JhY2tlbmQvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBjb3JzIGZyb20gXCJjb3JzXCI7XG5pbXBvcnQgbW9uZ29vc2UgZnJvbSBcIm1vbmdvb3NlXCI7XG5cbmNvbnN0IG1vbmdvVXJsID0gcHJvY2Vzcy5lbnYuTU9OR09fVVJMIHx8IFwibW9uZ29kYjovL2xvY2FsaG9zdC9wcm9qZWN0LW1vbmdvXCI7XG5tb25nb29zZS5jb25uZWN0KG1vbmdvVXJsLCB7IHVzZU5ld1VybFBhcnNlcjogdHJ1ZSwgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlIH0pO1xubW9uZ29vc2UuUHJvbWlzZSA9IFByb21pc2U7XG5cbi8vIERlZmluZXMgdGhlIHBvcnQgdGhlIGFwcCB3aWxsIHJ1biBvbi4gRGVmYXVsdHMgdG8gODA4MCwgYnV0IGNhbiBiZSBvdmVycmlkZGVuXG4vLyB3aGVuIHN0YXJ0aW5nIHRoZSBzZXJ2ZXIuIEV4YW1wbGUgY29tbWFuZCB0byBvdmVyd3JpdGUgUE9SVCBlbnYgdmFyaWFibGUgdmFsdWU6XG4vLyBQT1JUPTkwMDAgbnBtIHN0YXJ0XG5jb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA4MDgwO1xuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG4vLyBBZGQgbWlkZGxld2FyZXMgdG8gZW5hYmxlIGNvcnMgYW5kIGpzb24gYm9keSBwYXJzaW5nXG5hcHAudXNlKGNvcnMoKSk7XG5hcHAudXNlKGV4cHJlc3MuanNvbigpKTtcblxuLy8gU3RhcnQgZGVmaW5pbmcgeW91ciByb3V0ZXMgaGVyZVxuYXBwLmdldChcIi9cIiwgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5zZW5kKFwiSGVsbG8gVGVjaG5pZ28hXCIpO1xufSk7XG5cbi8vIFN0YXJ0IHRoZSBzZXJ2ZXJcbmFwcC5saXN0ZW4ocG9ydCwgKCkgPT4ge1xuICBjb25zb2xlLmxvZyhgU2VydmVyIHJ1bm5pbmcgb24gaHR0cDovL2xvY2FsaG9zdDoke3BvcnR9YCk7XG59KTtcbiJdfQ==","map":{"version":3,"sources":["server.js"],"names":["express","cors","mongoose","mongoUrl","process","env","MONGO_URL","connect","useNewUrlParser","useUnifiedTopology","Promise","port","PORT","app","use","json","get","req","res","send","listen","console","log"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAAZ,IAAyB,mCAA1C;AACAJ,QAAQ,CAACK,OAAT,CAAiBJ,QAAjB,EAA2B;AAAEK,EAAAA,eAAe,EAAE,IAAnB;AAAyBC,EAAAA,kBAAkB,EAAE;AAA7C,CAA3B;AACAP,QAAQ,CAACQ,OAAT,GAAmBA,OAAnB,C,CAEA;AACA;AACA;;AACA,MAAMC,IAAI,GAAGP,OAAO,CAACC,GAAR,CAAYO,IAAZ,IAAoB,IAAjC;AACA,MAAMC,GAAG,GAAGb,OAAO,EAAnB,C,CAEA;;AACAa,GAAG,CAACC,GAAJ,CAAQb,IAAI,EAAZ;AACAY,GAAG,CAACC,GAAJ,CAAQd,OAAO,CAACe,IAAR,EAAR,E,CAEA;;AACAF,GAAG,CAACG,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,EAAAA,GAAG,CAACC,IAAJ,CAAS,iBAAT;AACD,CAFD,E,CAIA;;AACAN,GAAG,CAACO,MAAJ,CAAWT,IAAX,EAAiB,MAAM;AACrBU,EAAAA,OAAO,CAACC,GAAR,CAAa,sCAAqCX,IAAK,EAAvD;AACD,CAFD","sourceRoot":"/Users/kristin/Desktop/hotel-prins-carl/backend/","sourcesContent":["import express from \"express\";\nimport cors from \"cors\";\nimport mongoose from \"mongoose\";\n\nconst mongoUrl = process.env.MONGO_URL || \"mongodb://localhost/project-mongo\";\nmongoose.connect(mongoUrl, { useNewUrlParser: true, useUnifiedTopology: true });\nmongoose.Promise = Promise;\n\n// Defines the port the app will run on. Defaults to 8080, but can be overridden\n// when starting the server. Example command to overwrite PORT env variable value:\n// PORT=9000 npm start\nconst port = process.env.PORT || 8080;\nconst app = express();\n\n// Add middlewares to enable cors and json body parsing\napp.use(cors());\napp.use(express.json());\n\n// Start defining your routes here\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello Technigo!\");\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n"]}},"mtime":1670921174565}}